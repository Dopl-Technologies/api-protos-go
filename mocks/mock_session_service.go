// Code generated by MockGen. DO NOT EDIT.
// Source: session_service.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	platform "github.com/pyrus/platform-public/pkg/protos/platform"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockSessionServiceClient is a mock of SessionServiceClient interface
type MockSessionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceClientMockRecorder
}

// MockSessionServiceClientMockRecorder is the mock recorder for MockSessionServiceClient
type MockSessionServiceClientMockRecorder struct {
	mock *MockSessionServiceClient
}

// NewMockSessionServiceClient creates a new mock instance
func NewMockSessionServiceClient(ctrl *gomock.Controller) *MockSessionServiceClient {
	mock := &MockSessionServiceClient{ctrl: ctrl}
	mock.recorder = &MockSessionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionServiceClient) EXPECT() *MockSessionServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessionServiceClient) Create(ctx context.Context, in *platform.CreateSessionRequest, opts ...grpc.CallOption) (*platform.CreateSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*platform.CreateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionServiceClient)(nil).Create), varargs...)
}

// Get mocks base method
func (m *MockSessionServiceClient) Get(ctx context.Context, in *platform.GetSessionRequest, opts ...grpc.CallOption) (*platform.GetSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*platform.GetSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSessionServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionServiceClient)(nil).Get), varargs...)
}

// List mocks base method
func (m *MockSessionServiceClient) List(ctx context.Context, in *platform.ListSessionsRequest, opts ...grpc.CallOption) (platform.SessionService_ListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(platform.SessionService_ListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSessionServiceClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSessionServiceClient)(nil).List), varargs...)
}

// Delete mocks base method
func (m *MockSessionServiceClient) Delete(ctx context.Context, in *platform.DeleteSessionRequest, opts ...grpc.CallOption) (*platform.DeleteSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*platform.DeleteSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSessionServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionServiceClient)(nil).Delete), varargs...)
}

// WaitFor mocks base method
func (m *MockSessionServiceClient) WaitFor(ctx context.Context, in *platform.WaitForSessionRequest, opts ...grpc.CallOption) (platform.SessionService_WaitForClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitFor", varargs...)
	ret0, _ := ret[0].(platform.SessionService_WaitForClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitFor indicates an expected call of WaitFor
func (mr *MockSessionServiceClientMockRecorder) WaitFor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitFor", reflect.TypeOf((*MockSessionServiceClient)(nil).WaitFor), varargs...)
}

// ListWaiting mocks base method
func (m *MockSessionServiceClient) ListWaiting(ctx context.Context, in *platform.ListWaitingSessionRequest, opts ...grpc.CallOption) (platform.SessionService_ListWaitingClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWaiting", varargs...)
	ret0, _ := ret[0].(platform.SessionService_ListWaitingClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWaiting indicates an expected call of ListWaiting
func (mr *MockSessionServiceClientMockRecorder) ListWaiting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWaiting", reflect.TypeOf((*MockSessionServiceClient)(nil).ListWaiting), varargs...)
}

// Join mocks base method
func (m *MockSessionServiceClient) Join(ctx context.Context, in *platform.JoinSessionRequest, opts ...grpc.CallOption) (platform.SessionService_JoinClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(platform.SessionService_JoinClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Join indicates an expected call of Join
func (mr *MockSessionServiceClientMockRecorder) Join(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockSessionServiceClient)(nil).Join), varargs...)
}

// MockSessionService_ListClient is a mock of SessionService_ListClient interface
type MockSessionService_ListClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionService_ListClientMockRecorder
}

// MockSessionService_ListClientMockRecorder is the mock recorder for MockSessionService_ListClient
type MockSessionService_ListClientMockRecorder struct {
	mock *MockSessionService_ListClient
}

// NewMockSessionService_ListClient creates a new mock instance
func NewMockSessionService_ListClient(ctrl *gomock.Controller) *MockSessionService_ListClient {
	mock := &MockSessionService_ListClient{ctrl: ctrl}
	mock.recorder = &MockSessionService_ListClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionService_ListClient) EXPECT() *MockSessionService_ListClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockSessionService_ListClient) Recv() (*platform.ListSessionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*platform.ListSessionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockSessionService_ListClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSessionService_ListClient)(nil).Recv))
}

// Header mocks base method
func (m *MockSessionService_ListClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockSessionService_ListClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSessionService_ListClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockSessionService_ListClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockSessionService_ListClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSessionService_ListClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockSessionService_ListClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockSessionService_ListClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSessionService_ListClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockSessionService_ListClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSessionService_ListClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSessionService_ListClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockSessionService_ListClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSessionService_ListClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSessionService_ListClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockSessionService_ListClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSessionService_ListClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSessionService_ListClient)(nil).RecvMsg), m)
}

// MockSessionService_WaitForClient is a mock of SessionService_WaitForClient interface
type MockSessionService_WaitForClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionService_WaitForClientMockRecorder
}

// MockSessionService_WaitForClientMockRecorder is the mock recorder for MockSessionService_WaitForClient
type MockSessionService_WaitForClientMockRecorder struct {
	mock *MockSessionService_WaitForClient
}

// NewMockSessionService_WaitForClient creates a new mock instance
func NewMockSessionService_WaitForClient(ctrl *gomock.Controller) *MockSessionService_WaitForClient {
	mock := &MockSessionService_WaitForClient{ctrl: ctrl}
	mock.recorder = &MockSessionService_WaitForClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionService_WaitForClient) EXPECT() *MockSessionService_WaitForClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockSessionService_WaitForClient) Recv() (*platform.WaitForSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*platform.WaitForSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockSessionService_WaitForClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSessionService_WaitForClient)(nil).Recv))
}

// Header mocks base method
func (m *MockSessionService_WaitForClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockSessionService_WaitForClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSessionService_WaitForClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockSessionService_WaitForClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockSessionService_WaitForClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSessionService_WaitForClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockSessionService_WaitForClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockSessionService_WaitForClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSessionService_WaitForClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockSessionService_WaitForClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSessionService_WaitForClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSessionService_WaitForClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockSessionService_WaitForClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSessionService_WaitForClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSessionService_WaitForClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockSessionService_WaitForClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSessionService_WaitForClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSessionService_WaitForClient)(nil).RecvMsg), m)
}

// MockSessionService_ListWaitingClient is a mock of SessionService_ListWaitingClient interface
type MockSessionService_ListWaitingClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionService_ListWaitingClientMockRecorder
}

// MockSessionService_ListWaitingClientMockRecorder is the mock recorder for MockSessionService_ListWaitingClient
type MockSessionService_ListWaitingClientMockRecorder struct {
	mock *MockSessionService_ListWaitingClient
}

// NewMockSessionService_ListWaitingClient creates a new mock instance
func NewMockSessionService_ListWaitingClient(ctrl *gomock.Controller) *MockSessionService_ListWaitingClient {
	mock := &MockSessionService_ListWaitingClient{ctrl: ctrl}
	mock.recorder = &MockSessionService_ListWaitingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionService_ListWaitingClient) EXPECT() *MockSessionService_ListWaitingClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockSessionService_ListWaitingClient) Recv() (*platform.ListWaitingSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*platform.ListWaitingSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockSessionService_ListWaitingClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSessionService_ListWaitingClient)(nil).Recv))
}

// Header mocks base method
func (m *MockSessionService_ListWaitingClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockSessionService_ListWaitingClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSessionService_ListWaitingClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockSessionService_ListWaitingClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockSessionService_ListWaitingClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSessionService_ListWaitingClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockSessionService_ListWaitingClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockSessionService_ListWaitingClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSessionService_ListWaitingClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockSessionService_ListWaitingClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSessionService_ListWaitingClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSessionService_ListWaitingClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockSessionService_ListWaitingClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSessionService_ListWaitingClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSessionService_ListWaitingClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockSessionService_ListWaitingClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSessionService_ListWaitingClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSessionService_ListWaitingClient)(nil).RecvMsg), m)
}

// MockSessionService_JoinClient is a mock of SessionService_JoinClient interface
type MockSessionService_JoinClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionService_JoinClientMockRecorder
}

// MockSessionService_JoinClientMockRecorder is the mock recorder for MockSessionService_JoinClient
type MockSessionService_JoinClientMockRecorder struct {
	mock *MockSessionService_JoinClient
}

// NewMockSessionService_JoinClient creates a new mock instance
func NewMockSessionService_JoinClient(ctrl *gomock.Controller) *MockSessionService_JoinClient {
	mock := &MockSessionService_JoinClient{ctrl: ctrl}
	mock.recorder = &MockSessionService_JoinClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionService_JoinClient) EXPECT() *MockSessionService_JoinClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockSessionService_JoinClient) Recv() (*platform.JoinSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*platform.JoinSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockSessionService_JoinClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSessionService_JoinClient)(nil).Recv))
}

// Header mocks base method
func (m *MockSessionService_JoinClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockSessionService_JoinClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSessionService_JoinClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockSessionService_JoinClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockSessionService_JoinClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSessionService_JoinClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockSessionService_JoinClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockSessionService_JoinClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSessionService_JoinClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockSessionService_JoinClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSessionService_JoinClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSessionService_JoinClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockSessionService_JoinClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSessionService_JoinClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSessionService_JoinClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockSessionService_JoinClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSessionService_JoinClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSessionService_JoinClient)(nil).RecvMsg), m)
}

// MockSessionServiceServer is a mock of SessionServiceServer interface
type MockSessionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceServerMockRecorder
}

// MockSessionServiceServerMockRecorder is the mock recorder for MockSessionServiceServer
type MockSessionServiceServerMockRecorder struct {
	mock *MockSessionServiceServer
}

// NewMockSessionServiceServer creates a new mock instance
func NewMockSessionServiceServer(ctrl *gomock.Controller) *MockSessionServiceServer {
	mock := &MockSessionServiceServer{ctrl: ctrl}
	mock.recorder = &MockSessionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionServiceServer) EXPECT() *MockSessionServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessionServiceServer) Create(arg0 context.Context, arg1 *platform.CreateSessionRequest) (*platform.CreateSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*platform.CreateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionServiceServer)(nil).Create), arg0, arg1)
}

// Get mocks base method
func (m *MockSessionServiceServer) Get(arg0 context.Context, arg1 *platform.GetSessionRequest) (*platform.GetSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*platform.GetSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSessionServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionServiceServer)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockSessionServiceServer) List(arg0 *platform.ListSessionsRequest, arg1 platform.SessionService_ListServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List
func (mr *MockSessionServiceServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSessionServiceServer)(nil).List), arg0, arg1)
}

// Delete mocks base method
func (m *MockSessionServiceServer) Delete(arg0 context.Context, arg1 *platform.DeleteSessionRequest) (*platform.DeleteSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*platform.DeleteSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSessionServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionServiceServer)(nil).Delete), arg0, arg1)
}

// WaitFor mocks base method
func (m *MockSessionServiceServer) WaitFor(arg0 *platform.WaitForSessionRequest, arg1 platform.SessionService_WaitForServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitFor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitFor indicates an expected call of WaitFor
func (mr *MockSessionServiceServerMockRecorder) WaitFor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitFor", reflect.TypeOf((*MockSessionServiceServer)(nil).WaitFor), arg0, arg1)
}

// ListWaiting mocks base method
func (m *MockSessionServiceServer) ListWaiting(arg0 *platform.ListWaitingSessionRequest, arg1 platform.SessionService_ListWaitingServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWaiting", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWaiting indicates an expected call of ListWaiting
func (mr *MockSessionServiceServerMockRecorder) ListWaiting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWaiting", reflect.TypeOf((*MockSessionServiceServer)(nil).ListWaiting), arg0, arg1)
}

// Join mocks base method
func (m *MockSessionServiceServer) Join(arg0 *platform.JoinSessionRequest, arg1 platform.SessionService_JoinServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockSessionServiceServerMockRecorder) Join(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockSessionServiceServer)(nil).Join), arg0, arg1)
}

// MockSessionService_ListServer is a mock of SessionService_ListServer interface
type MockSessionService_ListServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionService_ListServerMockRecorder
}

// MockSessionService_ListServerMockRecorder is the mock recorder for MockSessionService_ListServer
type MockSessionService_ListServerMockRecorder struct {
	mock *MockSessionService_ListServer
}

// NewMockSessionService_ListServer creates a new mock instance
func NewMockSessionService_ListServer(ctrl *gomock.Controller) *MockSessionService_ListServer {
	mock := &MockSessionService_ListServer{ctrl: ctrl}
	mock.recorder = &MockSessionService_ListServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionService_ListServer) EXPECT() *MockSessionService_ListServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockSessionService_ListServer) Send(arg0 *platform.ListSessionsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockSessionService_ListServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSessionService_ListServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockSessionService_ListServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockSessionService_ListServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSessionService_ListServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockSessionService_ListServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockSessionService_ListServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSessionService_ListServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockSessionService_ListServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockSessionService_ListServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSessionService_ListServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockSessionService_ListServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSessionService_ListServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSessionService_ListServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockSessionService_ListServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSessionService_ListServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSessionService_ListServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockSessionService_ListServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSessionService_ListServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSessionService_ListServer)(nil).RecvMsg), m)
}

// MockSessionService_WaitForServer is a mock of SessionService_WaitForServer interface
type MockSessionService_WaitForServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionService_WaitForServerMockRecorder
}

// MockSessionService_WaitForServerMockRecorder is the mock recorder for MockSessionService_WaitForServer
type MockSessionService_WaitForServerMockRecorder struct {
	mock *MockSessionService_WaitForServer
}

// NewMockSessionService_WaitForServer creates a new mock instance
func NewMockSessionService_WaitForServer(ctrl *gomock.Controller) *MockSessionService_WaitForServer {
	mock := &MockSessionService_WaitForServer{ctrl: ctrl}
	mock.recorder = &MockSessionService_WaitForServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionService_WaitForServer) EXPECT() *MockSessionService_WaitForServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockSessionService_WaitForServer) Send(arg0 *platform.WaitForSessionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockSessionService_WaitForServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSessionService_WaitForServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockSessionService_WaitForServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockSessionService_WaitForServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSessionService_WaitForServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockSessionService_WaitForServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockSessionService_WaitForServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSessionService_WaitForServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockSessionService_WaitForServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockSessionService_WaitForServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSessionService_WaitForServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockSessionService_WaitForServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSessionService_WaitForServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSessionService_WaitForServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockSessionService_WaitForServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSessionService_WaitForServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSessionService_WaitForServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockSessionService_WaitForServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSessionService_WaitForServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSessionService_WaitForServer)(nil).RecvMsg), m)
}

// MockSessionService_ListWaitingServer is a mock of SessionService_ListWaitingServer interface
type MockSessionService_ListWaitingServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionService_ListWaitingServerMockRecorder
}

// MockSessionService_ListWaitingServerMockRecorder is the mock recorder for MockSessionService_ListWaitingServer
type MockSessionService_ListWaitingServerMockRecorder struct {
	mock *MockSessionService_ListWaitingServer
}

// NewMockSessionService_ListWaitingServer creates a new mock instance
func NewMockSessionService_ListWaitingServer(ctrl *gomock.Controller) *MockSessionService_ListWaitingServer {
	mock := &MockSessionService_ListWaitingServer{ctrl: ctrl}
	mock.recorder = &MockSessionService_ListWaitingServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionService_ListWaitingServer) EXPECT() *MockSessionService_ListWaitingServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockSessionService_ListWaitingServer) Send(arg0 *platform.ListWaitingSessionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockSessionService_ListWaitingServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSessionService_ListWaitingServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockSessionService_ListWaitingServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockSessionService_ListWaitingServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSessionService_ListWaitingServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockSessionService_ListWaitingServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockSessionService_ListWaitingServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSessionService_ListWaitingServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockSessionService_ListWaitingServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockSessionService_ListWaitingServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSessionService_ListWaitingServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockSessionService_ListWaitingServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSessionService_ListWaitingServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSessionService_ListWaitingServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockSessionService_ListWaitingServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSessionService_ListWaitingServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSessionService_ListWaitingServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockSessionService_ListWaitingServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSessionService_ListWaitingServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSessionService_ListWaitingServer)(nil).RecvMsg), m)
}

// MockSessionService_JoinServer is a mock of SessionService_JoinServer interface
type MockSessionService_JoinServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionService_JoinServerMockRecorder
}

// MockSessionService_JoinServerMockRecorder is the mock recorder for MockSessionService_JoinServer
type MockSessionService_JoinServerMockRecorder struct {
	mock *MockSessionService_JoinServer
}

// NewMockSessionService_JoinServer creates a new mock instance
func NewMockSessionService_JoinServer(ctrl *gomock.Controller) *MockSessionService_JoinServer {
	mock := &MockSessionService_JoinServer{ctrl: ctrl}
	mock.recorder = &MockSessionService_JoinServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionService_JoinServer) EXPECT() *MockSessionService_JoinServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockSessionService_JoinServer) Send(arg0 *platform.JoinSessionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockSessionService_JoinServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSessionService_JoinServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockSessionService_JoinServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockSessionService_JoinServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSessionService_JoinServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockSessionService_JoinServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockSessionService_JoinServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSessionService_JoinServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockSessionService_JoinServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockSessionService_JoinServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSessionService_JoinServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockSessionService_JoinServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSessionService_JoinServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSessionService_JoinServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockSessionService_JoinServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSessionService_JoinServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSessionService_JoinServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockSessionService_JoinServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSessionService_JoinServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSessionService_JoinServer)(nil).RecvMsg), m)
}
