// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: state_manager.proto

package dtprotos

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordFramesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *Frame               `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Created *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *RecordFramesRequest) Reset() {
	*x = RecordFramesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFramesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFramesRequest) ProtoMessage() {}

func (x *RecordFramesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFramesRequest.ProtoReflect.Descriptor instead.
func (*RecordFramesRequest) Descriptor() ([]byte, []int) {
	return file_state_manager_proto_rawDescGZIP(), []int{0}
}

func (x *RecordFramesRequest) GetData() *Frame {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RecordFramesRequest) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type RecordFramesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordFramesResponse) Reset() {
	*x = RecordFramesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFramesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFramesResponse) ProtoMessage() {}

func (x *RecordFramesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_state_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFramesResponse.ProtoReflect.Descriptor instead.
func (*RecordFramesResponse) Descriptor() ([]byte, []int) {
	return file_state_manager_proto_rawDescGZIP(), []int{1}
}

var File_state_manager_proto protoreflect.FileDescriptor

var file_state_manager_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x64, 0x6f, 0x70, 0x6c, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a,
	0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x70, 0x6c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x16,
	0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x84, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d,
	0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c,
	0x2e, 0x64, 0x6f, 0x70, 0x6c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64,
	0x6f, 0x70, 0x6c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x42, 0x4f, 0x5a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x70, 0x6c,
	0x2d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2d, 0x67, 0x6f, 0x3b, 0x64, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0xaa, 0x02, 0x17, 0x44, 0x6f, 0x70, 0x6c, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_state_manager_proto_rawDescOnce sync.Once
	file_state_manager_proto_rawDescData = file_state_manager_proto_rawDesc
)

func file_state_manager_proto_rawDescGZIP() []byte {
	file_state_manager_proto_rawDescOnce.Do(func() {
		file_state_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_state_manager_proto_rawDescData)
	})
	return file_state_manager_proto_rawDescData
}

var file_state_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_state_manager_proto_goTypes = []interface{}{
	(*RecordFramesRequest)(nil),  // 0: dopltechnologies.protos.RecordFramesRequest
	(*RecordFramesResponse)(nil), // 1: dopltechnologies.protos.RecordFramesResponse
	(*Frame)(nil),                // 2: dopltechnologies.protos.Frame
	(*timestamp.Timestamp)(nil),  // 3: google.protobuf.Timestamp
}
var file_state_manager_proto_depIdxs = []int32{
	2, // 0: dopltechnologies.protos.RecordFramesRequest.data:type_name -> dopltechnologies.protos.Frame
	3, // 1: dopltechnologies.protos.RecordFramesRequest.created:type_name -> google.protobuf.Timestamp
	0, // 2: dopltechnologies.protos.StateManagerService.RecordFrames:input_type -> dopltechnologies.protos.RecordFramesRequest
	1, // 3: dopltechnologies.protos.StateManagerService.RecordFrames:output_type -> dopltechnologies.protos.RecordFramesResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_state_manager_proto_init() }
func file_state_manager_proto_init() {
	if File_state_manager_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_state_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordFramesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordFramesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_state_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_state_manager_proto_goTypes,
		DependencyIndexes: file_state_manager_proto_depIdxs,
		MessageInfos:      file_state_manager_proto_msgTypes,
	}.Build()
	File_state_manager_proto = out.File
	file_state_manager_proto_rawDesc = nil
	file_state_manager_proto_goTypes = nil
	file_state_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StateManagerServiceClient is the client API for StateManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateManagerServiceClient interface {
	// Records frames
	RecordFrames(ctx context.Context, opts ...grpc.CallOption) (StateManagerService_RecordFramesClient, error)
}

type stateManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateManagerServiceClient(cc grpc.ClientConnInterface) StateManagerServiceClient {
	return &stateManagerServiceClient{cc}
}

func (c *stateManagerServiceClient) RecordFrames(ctx context.Context, opts ...grpc.CallOption) (StateManagerService_RecordFramesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StateManagerService_serviceDesc.Streams[0], "/dopltechnologies.protos.StateManagerService/RecordFrames", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateManagerServiceRecordFramesClient{stream}
	return x, nil
}

type StateManagerService_RecordFramesClient interface {
	Send(*RecordFramesRequest) error
	CloseAndRecv() (*RecordFramesResponse, error)
	grpc.ClientStream
}

type stateManagerServiceRecordFramesClient struct {
	grpc.ClientStream
}

func (x *stateManagerServiceRecordFramesClient) Send(m *RecordFramesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stateManagerServiceRecordFramesClient) CloseAndRecv() (*RecordFramesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecordFramesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateManagerServiceServer is the server API for StateManagerService service.
type StateManagerServiceServer interface {
	// Records frames
	RecordFrames(StateManagerService_RecordFramesServer) error
}

// UnimplementedStateManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStateManagerServiceServer struct {
}

func (*UnimplementedStateManagerServiceServer) RecordFrames(StateManagerService_RecordFramesServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordFrames not implemented")
}

func RegisterStateManagerServiceServer(s *grpc.Server, srv StateManagerServiceServer) {
	s.RegisterService(&_StateManagerService_serviceDesc, srv)
}

func _StateManagerService_RecordFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StateManagerServiceServer).RecordFrames(&stateManagerServiceRecordFramesServer{stream})
}

type StateManagerService_RecordFramesServer interface {
	SendAndClose(*RecordFramesResponse) error
	Recv() (*RecordFramesRequest, error)
	grpc.ServerStream
}

type stateManagerServiceRecordFramesServer struct {
	grpc.ServerStream
}

func (x *stateManagerServiceRecordFramesServer) SendAndClose(m *RecordFramesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stateManagerServiceRecordFramesServer) Recv() (*RecordFramesRequest, error) {
	m := new(RecordFramesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StateManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dopltechnologies.protos.StateManagerService",
	HandlerType: (*StateManagerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordFrames",
			Handler:       _StateManagerService_RecordFrames_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "state_manager.proto",
}
